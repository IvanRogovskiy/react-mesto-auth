{"ast":null,"code":"const BASE_URL = `https://auth.nomoreparties.co`; // export const checkResponse = (res) => {\n\nexport const checkResponse = _ref => {\n  let {\n    res,\n    json\n  } = _ref;\n  // if (res.ok) { return res.json() }\n  console.log('checkResponse res', res);\n  console.log('checkResponse json', json);\n\n  if (res.ok) {\n    return json;\n  } // return Promise.reject(res)\n\n\n  const err = {\n    code: res.statusCode,\n    json\n  };\n  return Promise.reject(err);\n};\nexport const register = (email, password) => {\n  const body1 = JSON.stringify({\n    password,\n    email\n  });\n  console.log(body1);\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    return res.json().then(json => {\n      console.log(res, json);\n      return {\n        res,\n        json\n      };\n    }).catch(err => {\n      throw new Error('kek');\n    });\n  }).then(_ref2 => {\n    let {\n      res,\n      json\n    } = _ref2;\n    console.log('ololo', res, json);\n    return checkResponse({\n      res,\n      json\n    });\n  }) // .then((response) => {\n  //     console.log(response)\n  //     return checkResponse(response)\n  // })\n  .catch(err => {\n    console.log(err);\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return res.status;\n    }\n  }).then(data => {\n    if (data.code !== 400 && data.code !== 401) {\n      localStorage.setItem('jwt', data.token);\n      return data;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ivanrogovskiy/Documents/tries/yandex/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","checkResponse","res","json","console","log","ok","err","code","statusCode","Promise","reject","register","email","password","body1","JSON","stringify","fetch","method","headers","body","then","catch","Error","authorize","status","data","localStorage","setItem","token"],"mappings":"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","sourcesContent":["const BASE_URL = `https://auth.nomoreparties.co`\n\n// export const checkResponse = (res) => {\nexport const checkResponse = ({res, json}) => {\n        // if (res.ok) { return res.json() }\n    console.log('checkResponse res', res);\n    console.log('checkResponse json', json);\n\n    if (res.ok) { return json }\n    // return Promise.reject(res)\n    const err = { code:res.statusCode, json }\n    return Promise.reject(err)\n\n}\n\nexport const register = (email, password) => {\n    const body1 = JSON.stringify({password, email})\n    console.log(body1);\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-type': 'application/json',\n        },\n        body: JSON.stringify({password, email})\n    })\n        .then(res => {\n            return res.json().then(json => {\n                console.log(res, json);\n                return {res, json}\n            }).catch(err => {\n                throw new Error('kek')\n            })\n        })\n        .then(({res, json}) => {\n            console.log('ololo', res, json);\n            return checkResponse(({res, json}))\n        })\n        // .then((response) => {\n        //     console.log(response)\n        //     return checkResponse(response)\n        // })\n        .catch((err) => {\n            console.log(err)\n        })\n}\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`,{\n        method: 'POST',\n        headers: {\n            'Content-type': 'application/json',\n        },\n        body: JSON.stringify({password, email})\n    })\n        .then((res) => {\n            if(res.ok) {\n                return res.json()\n            } else {\n                    return res.status\n                }\n            }\n        )\n        .then((data) => {\n            if((data.code !== 400 && data.code !== 401)) {\n                localStorage.setItem('jwt', data.token)\n                return data\n            }\n        })\n}\n\n"]},"metadata":{},"sourceType":"module"}