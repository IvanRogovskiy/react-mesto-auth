{"ast":null,"code":"import { baseUrl } from \"./constants\";\nimport { headers } from \"./constants\";\n\nclass Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  getMyProfileInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res, 'Ошибка получения данных профиля');\n    });\n  }\n\n  getUsersCards() {\n    return fetch(`${this._baseUrl}/cards `, {\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res, 'Ошибка получения карточек');\n    });\n  }\n\n  updateUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => {\n      return this._checkResponse(res, 'Ошибка при обновлении данных юзера');\n    });\n  }\n\n  addNewCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => {\n      return this._checkResponse(res, `Ошибка ${res.status} при создании карточки`);\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res, `Ошибка ${res.status} при удалении карточки с id ${cardId}`);\n    });\n  }\n\n  addLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res, `Ошибка ${res.status} при лайке карточки с id ${cardId}`);\n    });\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._checkResponse(res, `Ошибка ${res.status} при удалении лайка карточки с id ${cardId}`);\n    });\n  }\n\n  updateUserAvatar(link) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => {\n      return this._checkResponse(res, `Ошибка ${res.status} при обновлении аватара пользователя`);\n    });\n  }\n\n  _checkResponse(res, msg) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(msg);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl,\n  headers\n});\nexport default api;","map":{"version":3,"sources":["/Users/ivanrogovskiy/Documents/tries/yandex/mesto-react/src/utils/Api.js"],"names":["baseUrl","headers","Api","constructor","_baseUrl","_headers","getMyProfileInfo","fetch","then","res","_checkResponse","getUsersCards","updateUserInfo","name","about","method","body","JSON","stringify","addNewCard","link","status","deleteCard","cardId","addLike","removeLike","updateUserAvatar","avatar","msg","ok","json","Promise","reject","api"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,GAAN,CAAU;AACNC,EAAAA,WAAW,OAAqB;AAAA,QAApB;AAACH,MAAAA,OAAD;AAAUC,MAAAA;AAAV,KAAoB;AAC5B,SAAKG,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,QAAL,GAAgBJ,OAAhB;AACH;;AAEDK,EAAAA,gBAAgB,GAAG;AACf,WAAOC,KAAK,CAAE,GAAE,KAAKH,QAAS,WAAlB,EAA8B;AACtCH,MAAAA,OAAO,EAAC,KAAKI;AADyB,KAA9B,CAAL,CAGFG,IAHE,CAGGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAAyB,iCAAzB,CAAP;AAAmE,KAJpE,CAAP;AAMH;;AAEDE,EAAAA,aAAa,GAAG;AACZ,WAAOJ,KAAK,CAAE,GAAE,KAAKH,QAAS,SAAlB,EAA4B;AACpCH,MAAAA,OAAO,EAAE,KAAKI;AADsB,KAA5B,CAAL,CAGFG,IAHE,CAGGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAAyB,2BAAzB,CAAP;AAA6D,KAJ9D,CAAP;AAMH;;AAEDG,EAAAA,cAAc,QAAgB;AAAA,QAAf;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAe;AAC1B,WAAOP,KAAK,CAAE,GAAE,KAAKH,QAAS,WAAlB,EAA8B;AACtCW,MAAAA,MAAM,EAAE,OAD8B;AAEtCd,MAAAA,OAAO,EAAE,KAAKI,QAFwB;AAGtCW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,QAAAA,IADiB;AAEjBC,QAAAA;AAFiB,OAAf;AAHgC,KAA9B,CAAL,CAQFN,IARE,CAQGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAAyB,oCAAzB,CAAP;AAAuE,KATxE,CAAP;AAWH;;AAEDU,EAAAA,UAAU,QAAe;AAAA,QAAd;AAACN,MAAAA,IAAD;AAAOO,MAAAA;AAAP,KAAc;AACrB,WAAOb,KAAK,CAAE,GAAE,KAAKH,QAAS,QAAlB,EAA2B;AACnCW,MAAAA,MAAM,EAAE,MAD2B;AAEnCd,MAAAA,OAAO,EAAE,KAAKI,QAFqB;AAGnCW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,QAAAA,IADiB;AAEjBO,QAAAA;AAFiB,OAAf;AAH6B,KAA3B,CAAL,CAQFZ,IARE,CAQGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAA0B,UAASA,GAAG,CAACY,MAAO,wBAA9C,CAAP;AACH,KAVE,CAAP;AAWH;;AAEDC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,WAAOhB,KAAK,CAAE,GAAE,KAAKH,QAAS,UAASmB,MAAO,EAAlC,EAAqC;AAC7CR,MAAAA,MAAM,EAAE,QADqC;AAE7Cd,MAAAA,OAAO,EAAE,KAAKI;AAF+B,KAArC,CAAL,CAIFG,IAJE,CAIGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAA0B,UAASA,GAAG,CAACY,MAAO,+BAA8BE,MAAO,EAAnF,CAAP;AACH,KANE,CAAP;AAOH;;AAEDC,EAAAA,OAAO,CAACD,MAAD,EAAS;AACZ,WAAOhB,KAAK,CAAE,GAAE,KAAKH,QAAS,UAASmB,MAAO,QAAlC,EAA2C;AACnDR,MAAAA,MAAM,EAAE,KAD2C;AAEnDd,MAAAA,OAAO,EAAE,KAAKI;AAFqC,KAA3C,CAAL,CAIFG,IAJE,CAIGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAA0B,UAASA,GAAG,CAACY,MAAO,4BAA2BE,MAAO,EAAhF,CAAP;AACH,KANE,CAAP;AAOH;;AAEDE,EAAAA,UAAU,CAACF,MAAD,EAAS;AACf,WAAOhB,KAAK,CAAE,GAAE,KAAKH,QAAS,UAASmB,MAAO,QAAlC,EAA2C;AACnDR,MAAAA,MAAM,EAAE,QAD2C;AAEnDd,MAAAA,OAAO,EAAE,KAAKI;AAFqC,KAA3C,CAAL,CAIFG,IAJE,CAIGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAA0B,UAASA,GAAG,CAACY,MAAO,qCAAoCE,MAAO,EAAzF,CAAP;AACH,KANE,CAAP;AAOH;;AAEDG,EAAAA,gBAAgB,CAACN,IAAD,EAAO;AACnB,WAAOb,KAAK,CAAE,GAAE,KAAKH,QAAS,kBAAlB,EAAqC;AAC7CW,MAAAA,MAAM,EAAE,OADqC;AAE7Cd,MAAAA,OAAO,EAAE,KAAKI,QAF+B;AAG7CW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBS,QAAAA,MAAM,EAAEP;AADS,OAAf;AAHuC,KAArC,CAAL,CAOFZ,IAPE,CAOGC,GAAG,IAAI;AACT,aAAO,KAAKC,cAAL,CAAoBD,GAApB,EAA0B,UAASA,GAAG,CAACY,MAAO,sCAA9C,CAAP;AACH,KATE,CAAP;AAUH;;AAEDX,EAAAA,cAAc,CAACD,GAAD,EAAMmB,GAAN,EAAW;AACrB,QAAInB,GAAG,CAACoB,EAAR,EAAY;AAAE,aAAOpB,GAAG,CAACqB,IAAJ,EAAP;AAAmB;;AACjC,WAAOC,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAAP;AACH;;AAlGK;;AAqGV,MAAMK,GAAG,GAAG,IAAI/B,GAAJ,CAAQ;AAACF,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAR,CAAZ;AACA,eAAegC,GAAf","sourcesContent":["import {baseUrl} from \"./constants\";\nimport {headers} from \"./constants\";\n\nclass Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    getMyProfileInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers:this._headers\n        })\n            .then(res => {\n                return this._checkResponse(res, 'Ошибка получения данных профиля')}\n            )\n    }\n\n    getUsersCards() {\n        return fetch(`${this._baseUrl}/cards `, {\n            headers: this._headers\n        })\n            .then(res => {\n                return this._checkResponse(res, 'Ошибка получения карточек')}\n            )\n    }\n\n    updateUserInfo({name, about}) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                about\n            })\n        })\n            .then(res => {\n                return this._checkResponse(res, 'Ошибка при обновлении данных юзера') }\n            )\n    }\n\n    addNewCard({name, link}) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                link\n            })\n        })\n            .then(res => {\n                return this._checkResponse(res, `Ошибка ${res.status} при создании карточки`)\n            })\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => {\n                return this._checkResponse(res, `Ошибка ${res.status} при удалении карточки с id ${cardId}`)\n            })\n    }\n\n    addLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n            .then(res => {\n                return this._checkResponse(res, `Ошибка ${res.status} при лайке карточки с id ${cardId}`)\n            })\n    }\n\n    removeLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => {\n                return this._checkResponse(res, `Ошибка ${res.status} при удалении лайка карточки с id ${cardId}`)\n            })\n    }\n\n    updateUserAvatar(link) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: link,\n            })\n        })\n            .then(res => {\n                return this._checkResponse(res, `Ошибка ${res.status} при обновлении аватара пользователя`)\n            })\n    }\n\n    _checkResponse(res, msg) {\n        if (res.ok) { return res.json() }\n        return Promise.reject(msg)\n    }\n}\n\nconst api = new Api({baseUrl, headers});\nexport default api"]},"metadata":{},"sourceType":"module"}